name: Code Review

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  # 如你仍有不需要密钥的检查（lint/test），可继续使用 pull_request 触发其他 job。
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  code-review:
    runs-on: ubuntu-latest
    # 仅在 pull_request_target（可访问 secrets）且非草稿时运行
    if: github.event_name == 'pull_request_target' && github.event.pull_request.draft == false

    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout base repo (trusted)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 只检出 base 的提交，避免执行 PR 中的任意代码
          ref: ${{ github.event.pull_request.base.sha }}
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies (from base repo)
        run: pnpm install --frozen-lockfile

      # 仅把 PR 的 head 当作“数据”拉取，不执行其中的代码
      - name: Fetch PR head (as data only)
        run: |
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr
          echo "PR_HEAD_SHA=$(git rev-parse pr)" >> $GITHUB_ENV
          echo "BASE_SHA=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV

      - name: Run Code Review
        id: review
        env:
          SILICONFLOW_API_KEY: ${{ secrets.SILICONFLOW_API_KEY }}
        run: |
          OUTPUT=$(npx tsx scripts/code-review.ts ${{ github.event.pull_request.number }} $BASE_SHA $PR_HEAD_SHA)

          # 提取报告内容（由你的脚本以 --REPORT_START/END-- 包围）
          REPORT=$(echo "$OUTPUT" | sed -n '/---REPORT_START---/,/---REPORT_END---/p' | sed '1d;$d')

          # 保存报告供下一步评论使用
          echo "$REPORT" > review.md

          # 也输出到 job 输出（如需复用）
          {
            echo "review<<EOF"
            echo "$REPORT"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Post Review Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reviewContent = fs.readFileSync('review.md', 'utf8');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🤖 AI 代码审查报告')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: reviewContent
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reviewContent
              });
            }